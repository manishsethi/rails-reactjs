{
  "name": "hapi-react-views",
  "version": "9.2.1",
  "description": "A hapi view engine for React components.",
  "main": "index.js",
  "scripts": {
    "test": "lab -t 100 -c -L -I 'Reflect,core,_babelPolyfill,regeneratorRuntime,__core-js_shared__'",
    "test-cover": "lab -t 100 -c -r html -o test/artifacts/coverage.html && open test/artifacts/coverage.html",
    "simple-example": "node examples/simple/server",
    "layout-example": "node examples/layout/server",
    "layout-component-example": "node examples/layout-component/server",
    "remount-example": "webpack --config examples/remount/webpack.js && node examples/remount/server"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jedireza/hapi-react-views"
  },
  "keywords": [
    "hapi",
    "react",
    "views",
    "universal",
    "isomorphic"
  ],
  "author": {
    "name": "Reza Akhavan",
    "email": "jedireza@gmail.com",
    "url": "http://reza.akhavan.me/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jedireza/hapi-react-views/issues"
  },
  "homepage": "https://github.com/jedireza/hapi-react-views",
  "dependencies": {
    "hoek": "4.x.x"
  },
  "peerDependencies": {
    "react": "15.x.x",
    "react-dom": "15.x.x "
  },
  "devDependencies": {
    "babel": "6.x.x",
    "babel-core": "6.x.x",
    "babel-loader": "6.x.x",
    "babel-preset-es2015": "6.x.x",
    "babel-preset-react": "6.x.x",
    "code": "4.x.x",
    "hapi": "15.x.x",
    "inert": "4.x.x",
    "lab": "11.x.x",
    "react": "15.x.x",
    "react-dom": "15.x.x",
    "vision": "4.x.x",
    "webpack": "1.x.x"
  },
  "readme": "# hapi-react-views\n\nA hapi view engine for React components.\n\n[![Build Status](https://travis-ci.org/jedireza/hapi-react-views.svg?branch=master)](https://travis-ci.org/jedireza/hapi-react-views)\n[![Dependency Status](https://david-dm.org/jedireza/hapi-react-views.svg?theme=shields.io)](https://david-dm.org/jedireza/hapi-react-views)\n[![Peer Dependency Status](https://david-dm.org/jedireza/hapi-react-views/peer-status.svg?style=flat)](https://david-dm.org/jedireza/hapi-react-views#info=peerDependencies)\n[![Dev Dependency Status](https://david-dm.org/jedireza/hapi-react-views/dev-status.svg?theme=shields.io)](https://david-dm.org/jedireza/hapi-react-views#info=devDependencies)\n\nBy default, we render static markup using `renderToStaticMarkup`. We can also\nchoose to use `renderToString`, preserving the `data-react-id` attributes so\nre-mounting client side is possible.\n\n\n## Install\n\n```bash\n$ npm install hapi-react-views\n```\n\nNote: Your project should have it's own `react` and `react-dom` dependencies\ninstalled. We depend on these via `peerDependencies`.\n\n\n## Usage\n\nNote: As of `hapi-react-views` v4.x your project must register a transpiler\nsuch as [`babel`][babel] or [`node-jsx`][node-jsx]. An alternative to this is\nto transpile ahead of time and save the result to file.\n\n[babel]: https://github.com/babel/babel\n[node-jsx]: https://github.com/petehunt/node-jsx\n\nNote: As of `hapi` v9.x, your project must register the [`vision`][vision]\nplugin in order for the `server.views()` and `server.render()` methods to be\navailable.\n\n[vision]: https://github.com/hapijs/vision\n\nConfiguring the server manually:\n\n```js\nconst Hapi = require('hapi');\nconst Vision = require('vision');\nconst HapiReactViews = require('hapi-react-views');\n\nrequire('babel-core/register')({\n    presets: ['react', 'es2015']\n});\n\nconst server = new Hapi.Server();\n\nserver.register(Vision, (err) => {\n\n    if (err) {\n        console.log('Failed to load vision.');\n    }\n\n    server.views({\n        engines: {\n            jsx: HapiReactViews\n        },\n        compileOptions: {}, // optional\n        relativeTo: __dirname,\n        path: 'views'\n    });\n});\n```\n\nConfiguring with a CLI manifest using [`visionary`][visionary]:\n\n[visionary]: https://github.com/hapijs/visionary\n\n```json\n{\n    \"connections\": [{\n        \"port\": 8080\n    }],\n    \"registrations\": [{\n        \"plugin\": \"vision\",\n        \"plugin\": {\n            \"register\": \"visionary\",\n            \"options\": {\n                \"engines\": {\n                  \"jsx\": \"hapi-react-views\"\n                },\n                \"compileOptions\": {},\n                \"path\": \"./views\"\n            }\n        }\n    }]\n}\n```\n\n\n## API\n\n### `server.views(options)`\n\n[Please refer to the `vision` docs on `server.views(options)` for complete\ndetails.][vision-docs]\n\n[vision-docs]: https://github.com/hapijs/vision/blob/master/API.md#serverviewsoptions\n\nWe'll be focusing on the `compileOptions` property that you can include when\npassing `options` to `server.views`.\n\nThe following `compileOptions` will customize how `hapi-react-views` works.\n\n  - `compileOptions` - options object passed to the engine's compile function.\n    Defaults to `{}`.\n    - `doctype` - a simple string prepended to the response. Defaults to\n      `<!DOCTYPE html>`\n    - `renderMethod` - the method to invoke on `React` to generate our output.\n      Available options are `renderToStaticMarkup` and `renderToString`.\n      Defaults to `renderToStaticMarkup`.\n    - `removeCache` - since transpilers tend to take a while to startup, we can\n      remove templates from the require cache so we don't need to restart the\n      server to see changes. Defaults to `'production' !==\n      process.env.NODE_ENV`.\n    - `removeCacheRegExp` - a `RegExp` pattern string, matching modules in\n      require cache will be removed. Defaults to `undefined`.\n    - `layout` - the name of the layout file to use.\n    - `layoutPath` - the directory path of where layouts are stored.\n    - `layoutRenderMethod` - same as `renderMethod` but used for layouts.\n      Defaults to `renderToStaticMarkup`.\n\nYou're able to override all these `compileOptions` at runtime.\n\n```js\nconst context = { name: 'Steve' };\nconst renderOpts = {\n    runtimeOptions: {\n        doctype: '<!DOCTYPE html>',\n        renderMethod: 'renderToString'\n    }\n};\n\nserver.render('template', context, renderOpts, (err, output) => {\n\n    // ...\n});\n```\n\n[Please refer to `vision`'s docs on\n`server.render(template, context, [options], callback)` for complete details.](https://github.com/hapijs/vision/blob/master/API.md#serverrendertemplate-context-options-callback)\n\n\n## Examples\n\nBefore you can run the examples, you need to clone this repo and install the dependencies.\n\n```bash\n$ git clone git@github.com:jedireza/hapi-react-views.git\n$ cd hapi-react-views\n$ npm install\n```\n\n### Rendering a simple page\n\nThis example renders a simple component as HTML output. [View the\ncode.][ex-simple]\n\n[ex-simple]: https://github.com/jedireza/hapi-react-views/tree/master/examples/simple\n\n```bash\n$ npm run simple-example\n```\n\n### Rendering with layouts\n\n#### Wrapper style layouts\n\nThis example is renders simple components as HTML but adds the idea of using\nwrapper layouts. [View the code.][ex-layouts]\n\n[ex-layouts]: https://github.com/jedireza/hapi-react-views/tree/master/examples/layout\n\n```bash\n$ npm run layout-example\n```\n\n#### Component style layouts\n\nThis example is renders simple components as HTML but adds the idea of using\ncomponent layouts. [View the code.][ex-comp-layouts]\n\n[ex-comp-layouts]: https://github.com/jedireza/hapi-react-views/tree/master/examples/layout-component\n\n```bash\n$ npm run layout-component-example\n```\n\n### Remounting on the client (universal/isomorphic)\n\nThis example demonstrates the idea of remounting client side in order to create\nuniversal/isomorphic applications. It also uses the wrapper layout feature so\nthe main view can be remounted on the client. [View the code.][ex-remount]\n\n[ex-remount]: https://github.com/jedireza/hapi-react-views/tree/master/examples/remount\n\n```bash\n$ npm run remount-example\n```\n\n\n## License\n\nMIT\n\n\n## Don't forget\n\nWhat you create with `hapi-react-views` is more important than `hapi-react-views`.\n",
  "readmeFilename": "README.md",
  "_id": "hapi-react-views@9.2.1",
  "dist": {
    "shasum": "82b6881767a71c16bb62fcf85811921cde745010"
  },
  "_from": "hapi-react-views@",
  "_resolved": "https://registry.npmjs.org/hapi-react-views/-/hapi-react-views-9.2.1.tgz"
}
